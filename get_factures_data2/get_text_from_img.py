import json
import requests
import cv2
import numpy as np
from PIL import Image, ImageOps, ImageEnhance
from io import BytesIO
import pytesseract

# Charger les liens des images depuis JSON
with open('data/factures_links.json') as file:
    file_data = json.load(file)

links = file_data['factures_links']
print(links)

loc = 0
for link in links:
    response = requests.get(link)
    
    # ğŸ“Œ 1) Charger lâ€™image avec PIL
    image = Image.open(BytesIO(response.content))

    # ğŸ“Œ 2) Convertir en niveaux de gris
    image = ImageOps.grayscale(image)

    # ğŸ“Œ 3) Augmenter la nettetÃ©
    enhancer = ImageEnhance.Sharpness(image)
    image = enhancer.enhance(4.0)

    # Convertir PIL -> OpenCV pour traitements avancÃ©s
    image_cv = np.array(image)
    image_cv = cv2.cvtColor(image_cv, cv2.COLOR_GRAY2BGR)  # Reconversion pour OpenCV

    # ğŸ“Œ 4) Appliquer un seuillage adaptatif pour amÃ©liorer le contraste
    image_cv = cv2.adaptiveThreshold(cv2.cvtColor(image_cv, cv2.COLOR_BGR2GRAY),
                                     255,
                                     cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                     cv2.THRESH_BINARY,
                                     11, 2)

    
    # ğŸ“Œ 6) AmÃ©lioration de la rÃ©solution si nÃ©cessaire
    height, width = image_cv.shape[:2]
    if width < 1000:  # Augmenter la rÃ©solution si l'image est trop petite
        image_cv = cv2.resize(image_cv, (width * 2, height * 2), interpolation=cv2.INTER_CUBIC)

    # Convertir OpenCV -> PIL pour sauvegarde
    image_final = Image.fromarray(image_cv)

    # ğŸ“Œ Sauvegarde de lâ€™image amÃ©liorÃ©e
    loc += 1
    image_final.save(f'data/images/image_pretraitee{loc}.png')

    print(f"Image {loc} traitÃ©e et sauvegardÃ©e !")
